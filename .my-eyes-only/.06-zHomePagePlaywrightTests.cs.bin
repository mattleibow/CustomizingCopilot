using System.Threading.Tasks;
using Microsoft.Playwright;
using Xunit;

namespace ProductShowcaseWebsite.Tests;

public class HomePagePlaywrightTests : IAsyncLifetime
{
    private IPlaywright _playwright = null!;
    private IBrowser _browser = null!;

    public async Task InitializeAsync()
    {
        _playwright = await Playwright.CreateAsync();
        _browser = await _playwright.Chromium.LaunchAsync(new BrowserTypeLaunchOptions
        {
            Headless = false,
            Channel = "msedge"
        });
    }

    public async Task DisposeAsync()
    {
        await _browser.CloseAsync();
        _playwright.Dispose();
    }

    [Fact]
    public async Task HomePage_CategoryFilter_WorksCorrectly()
    {
        var context = await _browser.NewContextAsync(new BrowserNewContextOptions
        {
            IgnoreHTTPSErrors = true
        });
        var page = await context.NewPageAsync();
        await page.GotoAsync("https://localhost:7022/");

        // Wait for the table to load
        await page.WaitForSelectorAsync("table.table");

        // Assert 'Laptop' is present
        var laptopCell = await page.QuerySelectorAsync("tbody tr td:text('Laptop')");
        Assert.NotNull(laptopCell);

        // Change category to 'Wearables'
        await page.SelectOptionAsync("#categorySelect", new[] { "3" });

        // Wait for the table to update
        await page.WaitForTimeoutAsync(500); // allow UI to update

        // Assert 'Smartwatch' is present
        var watchCell = await page.QuerySelectorAsync("tbody tr td:text('Smartwatch')");
        Assert.NotNull(watchCell);

        // Assert 'Laptop' is NOT present
        var laptopCellAfter = await page.QuerySelectorAsync("tbody tr td:text('Laptop')");
        Assert.Null(laptopCellAfter);

        await context.CloseAsync();
    }
}
